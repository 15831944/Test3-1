using System;
using System.Xml;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace SVNAutomate
  {
  class Program
    {
    static int RunSVN(string argument, out string output)
      {
      System.Diagnostics.Process proc = new System.Diagnostics.Process();
      proc.EnableRaisingEvents = false;
      proc.StartInfo.UseShellExecute = false;
      proc.StartInfo.RedirectStandardOutput = true;
      proc.StartInfo.RedirectStandardError = true;
      proc.StartInfo.CreateNoWindow = true;

      String PLink = "C:\\Program Files\\TortoiseSVN\\bin\\TortoisePlink.exe";
      String SVN = "C:\\Program Files\\Subversion\\bin\\svn.exe";

      if (proc.StartInfo.EnvironmentVariables.ContainsKey("SVNAUTO_PLINK"))
        PLink = proc.StartInfo.EnvironmentVariables["SVNAUTO_PLINK"];

      if (proc.StartInfo.EnvironmentVariables.ContainsKey("SVNAUTO_SVN"))
        SVN = proc.StartInfo.EnvironmentVariables["SVNAUTO_SVN"];

      PLink = PLink.Trim(' ', '\"', '\'');
      SVN = SVN.Trim(' ', '\"', '\'');

      output = "";

      if (!System.IO.File.Exists(PLink))
        {
        Console.WriteLine("Unable to find : " + PLink);
        return 1;
        }

      if (!System.IO.File.Exists(SVN))
        {
        Console.WriteLine("Unable to find : " + SVN);
        return 1;
        }

      if (proc.StartInfo.EnvironmentVariables.ContainsKey("SVN_SSH"))
        {
        proc.StartInfo.EnvironmentVariables.Remove("SVN_SSH");
        }
      proc.StartInfo.EnvironmentVariables.Add("SVN_SSH", PLink);//@"C:\\Program Files\\TortoiseSVN\\bin\\TortoisePlink.exe");


      try
        {
        proc.StartInfo.FileName = SVN;// "C:\\Program Files\\Subversion\\bin\\svn.exe";
        proc.StartInfo.Arguments = argument;
        proc.Start();
        proc.WaitForExit(100000);

        output = proc.StandardOutput.ReadToEnd();
        string error = proc.StandardError.ReadToEnd();

        if (proc.ExitCode != 0)
          {
          Console.WriteLine("Unable to run SVN command (have you installed the commandline subversion client?): " + error);
          }

        return proc.ExitCode;
        }
      catch (Exception e)
        {
        Console.WriteLine("Exception occurred in SVN process execution: " + e.Message);
        Console.WriteLine("Have you installed the commandline subversion client?");
        return 1;
        }
      }

    static int Main(string[] args)
      {
      bool forceUpdate = false; // don't update unless there is a change by default.
      bool didUpdate = false;
      string fileName = "";
      string filePath = "";

      foreach (string arg in args)
        {
        if (arg.StartsWith("/")) // an option.
          {
          if (arg.EndsWith("force"))
            forceUpdate = true;
          }
        else // not an option, last non-option will end up in fileName.
          fileName = arg;
        }

      if (fileName == "")
        {
        Console.WriteLine("No filename included on commandline.");
        return 1;
        }

      try
        {
        filePath = Path.GetFullPath(fileName);
        }
      catch (Exception)
        {
        Console.WriteLine("Filename can't be mapped to full path: " + fileName);
        return 1;
        }

      string info;

      // Other svn parameters of note:
      //exitCode = RunSVN("update --non-interactive", out update);
      //exitCode = RunSVN("log  --non-interactive --xml --limit 10", out log);

      int error = RunSVN("info  --non-interactive --xml", out info);
      if (error != 0)
        {
        return error;
        }

      int errorLevel = 1;

      try
        {
        XmlDocument xmlInfo = new XmlDocument();
        xmlInfo.LoadXml(info);

        String revision = "N/A";

        foreach (XmlNode node in xmlInfo.ChildNodes)
          foreach (XmlNode innerNode in node.ChildNodes)
            if (innerNode.Name == "entry")
              foreach (XmlAttribute attribute in innerNode.Attributes)
                if (attribute.Name == "revision")
                  {
                  revision = attribute.Value;
                  errorLevel = 0;
                  }

        String svn_h = "//" + "\n" +
                       "// Generated by SVNAutomate." + "\n" +
                       "//" + "\n" + "\n" +
                       "#define SCD_PATCH_SVN " + revision;

        String svn_cs = "//" + "\n" +
                        "// Generated by SVNAutomate." + "\n" +
                        "//" + "\n" + "\n" +
                        "namespace SysCAD.SVNVersion" + "\n" +
                        "{" + "\n" +
                        "  public class SVNVersion" + "\n" +
                        "  {" + "\n" +
                        "    public const int version = " + revision + ";" + "\n" +
                        "  }" + "\n" +
                        "}";

        String file;
        if (fileName.EndsWith(".h"))
          file = svn_h;
        else if (fileName.EndsWith(".cs"))
          file = svn_cs;
        else
          {
          Console.WriteLine("Unknown file format: " + fileName);
          return 1;
          }

        String current_file = "";

        try
          { // load current svn.h into current_svn_h.
          FileStream fileStream = new FileStream(fileName, FileMode.Open);
          StreamReader streamReader = new StreamReader(fileStream);
          while (!streamReader.EndOfStream)
            {
            current_file += streamReader.ReadLine() + "\n";
            }
          streamReader.Close();
          fileStream.Close();
          }
        catch (Exception) // no file or some other error.
          {
          }

        if ((!forceUpdate) && (current_file.Trim() != file.Trim()))
          {
          try
            {
            FileStream fileStream = new FileStream(filePath, FileMode.Create);
            StreamWriter streamWriter = new StreamWriter(fileStream);
            streamWriter.Write(file);
            didUpdate = true;
            streamWriter.Close();
            fileStream.Close();
            }
          catch (Exception e)
            {
            Console.WriteLine("Exception occurred in SVN process execution: " + e.Message);
            return 1;
            }
          }

        if (errorLevel != 0)
          {
          Console.WriteLine("Unable to find revision number:\n" + info);
          return 1;
          }
        else
          {
          if (didUpdate)
            Console.WriteLine("Updated/created file: " + fileName + "\n  (Full path expansion: " + filePath + ")");
          else
            Console.WriteLine("No changes, didn't update file: " + fileName + "\n  (Full path expansion: " + filePath + ")");

          return 0;
          }
        }
      catch (Exception e)
        {
        Console.WriteLine("Unable to process XML: " + e.Message + "\n" + info);
        return 1;
        }
      }
    }
  }
