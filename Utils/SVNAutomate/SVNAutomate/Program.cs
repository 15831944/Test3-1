using System;
using System.Xml;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace SVNAutomate
{
  class Program
  {
    static int RunSVN(string argument, out string output)
    {
      System.Diagnostics.Process proc = new System.Diagnostics.Process();
      proc.EnableRaisingEvents = false;
      proc.StartInfo.UseShellExecute = false;
      proc.StartInfo.RedirectStandardOutput = true;
      proc.StartInfo.RedirectStandardError = true;
      proc.StartInfo.CreateNoWindow = true;

      if (proc.StartInfo.EnvironmentVariables.ContainsKey("SVN_SSH"))
      {
        proc.StartInfo.EnvironmentVariables.Remove("SVN_SSH");
      }
      proc.StartInfo.EnvironmentVariables.Add("SVN_SSH", @"C:\\Program Files\\TortoiseSVN\\bin\\TortoisePlink.exe");

      output = "";

      try
      {
        proc.StartInfo.FileName = "C:\\Program Files\\Subversion\\bin\\svn.exe";
        proc.StartInfo.Arguments = argument;
        proc.Start();
        proc.WaitForExit(10000);

        output = proc.StandardOutput.ReadToEnd();
        string error = proc.StandardError.ReadToEnd();

        if (proc.ExitCode != 0)
        {
          Console.WriteLine("Unable to run SVN command (have you installed the commandline subversion client?): " + error);
        }

        return proc.ExitCode;
      }
      catch (Exception e)
      {
        Console.WriteLine("Exception occurred in SVN process execution: " + e.Message);
        return 1;
      }
    }

    static int Main(string[] args)
    {
      string info;

      // Other svn parameters of note:
      //exitCode = RunSVN("update --non-interactive", out update);
      //exitCode = RunSVN("log  --non-interactive --xml --limit 10", out log);

      int error = RunSVN("info  --non-interactive --xml", out info);
      if (error != 0)
      {
        return error;
      }

      int errorLevel = 1;

      try
      {
        XmlDocument xmlInfo = new XmlDocument();
        xmlInfo.LoadXml(info);

        String revision = "N/A";

        foreach (XmlNode node in xmlInfo.ChildNodes)
          foreach (XmlNode innerNode in node.ChildNodes)
            if (innerNode.Name == "entry")
              foreach (XmlAttribute attribute in innerNode.Attributes)
                if (attribute.Name == "revision")
                {
                  revision = attribute.Value;
                  errorLevel = 0;
                }

        String svn_h = "//" + "\n" +
                       "// Generated by SVNAutomate." + "\n" +
                       "//" + "\n" + "\n" +
          //                       "#ifndef __SVN_H" + "\n" +
          //                       "#define __SVN_H" + "\n" + "\n" +
                       "#define SCD_PATCH_SVN " + revision + "\n"; // _must_ have a trailing \n for the comaprison below to work.

        String current_svn_h = "";

        try
        { // load current svn.h into current_svn_h.
          FileStream fileStream = new FileStream("svn.h", FileMode.Open);
          StreamReader streamReader = new StreamReader(fileStream);
          while (!streamReader.EndOfStream)
          {
          current_svn_h += streamReader.ReadLine() + "\n";
          }
          streamReader.Close();
          fileStream.Close();
        }
        catch(Exception) // no file or some other error.
        {
        }

        if (current_svn_h != svn_h)
        {
          FileStream fileStream = new FileStream("svn.h", FileMode.Create);
          StreamWriter streamWriter = new StreamWriter(fileStream);
          streamWriter.Write(svn_h);
          streamWriter.Close();
          fileStream.Close();
        }
        if (errorLevel != 0)
        {
          Console.WriteLine("Unable to find revision number:\n" + info);
          return 1;
        }
      }
      catch (Exception e)
      {
        Console.WriteLine("Unable to process XML: " + e.Message + "\n" + info);
        return 1;
      }

      return errorLevel;
    }
  }
}
