#if !defined(AFX_SSDBGRID_H__A934B7EE_F944_11D2_BDE0_00A0C9ED9512__INCLUDED_)
#define AFX_SSDBGRID_H__A934B7EE_F944_11D2_BDE0_00A0C9ED9512__INCLUDED_

//#if _MSC_VER > 1000
//#pragma once
//#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class COleFont;
class CPicture;
class CSSColumns;
class CSSGroups;
class CSSSelBookmarks;
class CSSStyleSets;
class CSSActiveCell;

/////////////////////////////////////////////////////////////////////////////
// CSSDBGrid wrapper class

class CSSDBGrid : public CWnd
{
protected:
	DECLARE_DYNCREATE(CSSDBGrid)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xa7a61125, 0xeaa, 0x11d1, { 0xb2, 0x2f, 0x0, 0x0, 0xc0, 0x8c, 0x0, 0xc4 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	LPUNKNOWN GetDataSource();
	void SetDataSource(LPUNKNOWN);
	OLE_COLOR GetBackColor();
	void SetBackColor(OLE_COLOR);
	CString GetCaption();
	void SetCaption(LPCTSTR);
	BOOL GetEnabled();
	void SetEnabled(BOOL);
	COleFont GetFont();
	void SetFont(LPDISPATCH);
	OLE_COLOR GetForeColor();
	void SetForeColor(OLE_COLOR);
	OLE_HANDLE GetHWnd();
	void SetHWnd(OLE_HANDLE);
	unsigned long GetBackColorEven();
	void SetBackColorEven(unsigned long);
	unsigned long GetBackColorOdd();
	void SetBackColorOdd(unsigned long);
	unsigned long GetForeColorEven();
	void SetForeColorEven(unsigned long);
	unsigned long GetForeColorOdd();
	void SetForeColorOdd(unsigned long);
	long GetCaptionAlignment();
	void SetCaptionAlignment(long);
	long GetDividerType();
	void SetDividerType(long);
	long GetScrollBars();
	void SetScrollBars(long);
	BOOL GetAllowAddNew();
	void SetAllowAddNew(BOOL);
	BOOL GetAllowDelete();
	void SetAllowDelete(BOOL);
	BOOL GetAllowUpdate();
	void SetAllowUpdate(BOOL);
	BOOL GetAllowRowSizing();
	void SetAllowRowSizing(BOOL);
	BOOL GetAllowGroupSizing();
	void SetAllowGroupSizing(BOOL);
	BOOL GetAllowColumnSizing();
	void SetAllowColumnSizing(BOOL);
	BOOL GetRecordSelectors();
	void SetRecordSelectors(BOOL);
	BOOL GetGroupHeaders();
	void SetGroupHeaders(BOOL);
	BOOL GetColumnHeaders();
	void SetColumnHeaders(BOOL);
	short GetHeadLines();
	void SetHeadLines(short);
	COleFont GetHeadFont();
	void SetHeadFont(LPDISPATCH);
	long GetHeadFont3D();
	void SetHeadFont3D(long);
	short GetCol();
	void SetCol(short);
	short GetRow();
	void SetRow(short);
	long GetDataMode();
	void SetDataMode(long);
	short GetVisibleCols();
	void SetVisibleCols(short);
	short GetVisibleRows();
	void SetVisibleRows(short);
	short GetLeftCol();
	void SetLeftCol(short);
	short GetCols();
	void SetCols(short);
	long GetRows();
	void SetRows(long);
	CString GetFieldDelimiter();
	void SetFieldDelimiter(LPCTSTR);
	CString GetFieldSeparator();
	void SetFieldSeparator(LPCTSTR);
	long GetFont3D();
	void SetFont3D(long);
	long GetDividerStyle();
	void SetDividerStyle(long);
	BOOL GetUseExactRowCount();
	void SetUseExactRowCount(BOOL);
	unsigned long GetBevelColorFace();
	void SetBevelColorFace(unsigned long);
	unsigned long GetBevelColorFrame();
	void SetBevelColorFrame(unsigned long);
	unsigned long GetBevelColorHighlight();
	void SetBevelColorHighlight(unsigned long);
	unsigned long GetBevelColorShadow();
	void SetBevelColorShadow(unsigned long);
	long GetBevelColorScheme();
	void SetBevelColorScheme(long);
	short GetGroupHeadLines();
	void SetGroupHeadLines(short);
	VARIANT GetBookmark();
	void SetBookmark(const VARIANT&);
	BOOL GetAllowDragDrop();
	void SetAllowDragDrop(BOOL);
	VARIANT GetFirstRow();
	void SetFirstRow(const VARIANT&);
	float GetDefColWidth();
	void SetDefColWidth(float);
	float GetRowHeight();
	void SetRowHeight(float);
	short GetVisibleGrps();
	void SetVisibleGrps(short);
	short GetLeftGrp();
	void SetLeftGrp(short);
	BOOL GetCheckBox3D();
	void SetCheckBox3D(BOOL);
	short GetLevelCount();
	void SetLevelCount(short);
	BOOL GetRedraw();
	void SetRedraw(BOOL);
	BOOL GetComboDroppedDown();
	void SetComboDroppedDown(BOOL);
	BOOL GetAllowGroupMoving();
	void SetAllowGroupMoving(BOOL);
	BOOL GetAllowGroupSwapping();
	void SetAllowGroupSwapping(BOOL);
	long GetAllowColumnMoving();
	void SetAllowColumnMoving(long);
	long GetAllowColumnSwapping();
	void SetAllowColumnSwapping(long);
	float GetResizeHeight();
	void SetResizeHeight(float);
	float GetResizeWidth();
	void SetResizeWidth(float);
	VARIANT GetTagVariant();
	void SetTagVariant(const VARIANT&);
	short GetSplitterPos();
	void SetSplitterPos(short);
	BOOL GetSplitterVisible();
	void SetSplitterVisible(BOOL);
	long GetSelectTypeCol();
	void SetSelectTypeCol(long);
	long GetSelectTypeRow();
	void SetSelectTypeRow(long);
	BOOL GetSelectByCell();
	void SetSelectByCell(BOOL);
	CString GetHeadStyleSet();
	void SetHeadStyleSet(LPCTSTR);
	CString GetStyleSet();
	void SetStyleSet(LPCTSTR);
	BOOL GetMultiLine();
	void SetMultiLine(BOOL);
	CString GetActiveRowStyleSet();
	void SetActiveRowStyleSet(LPCTSTR);
	CPicture GetPictureButton();
	void SetPictureButton(LPDISPATCH);
	CPicture GetPictureComboButton();
	void SetPictureComboButton(LPDISPATCH);
	CPicture GetPictureRecordSelectors();
	void SetPictureRecordSelectors(LPDISPATCH);
	BOOL GetAllowColumnShrinking();
	void SetAllowColumnShrinking(BOOL);
	BOOL GetAllowGroupShrinking();
	void SetAllowGroupShrinking(BOOL);
	BOOL GetDataChanged();
	void SetDataChanged(BOOL);
	BOOL GetRowChanged();
	void SetRowChanged(BOOL);
	BOOL GetBalloonHelp();
	void SetBalloonHelp(BOOL);
	long GetCellNavigation();
	void SetCellNavigation(long);
	long GetRowNavigation();
	void SetRowNavigation(long);
	short GetGrp();
	void SetGrp(short);
	long GetRowSelectionStyle();
	void SetRowSelectionStyle(long);
	long GetMaxSelectedRows();
	void SetMaxSelectedRows(long);
	BOOL GetDroppedDown();
	void SetDroppedDown(BOOL);
	long GetBorderStyle();
	void SetBorderStyle(long);
	long GetHwndEdit();
	void SetHwndEdit(long);
	CSSColumns GetColumns();
	void SetColumns(LPDISPATCH);
	CSSGroups GetGroups();
	void SetGroups(LPDISPATCH);
	CSSSelBookmarks GetSelBookmarks();
	void SetSelBookmarks(LPDISPATCH);
	CSSStyleSets GetStyleSets();
	void SetStyleSets(LPDISPATCH);
	BOOL GetUseDefaults();
	void SetUseDefaults(BOOL);
	long GetTabNavigation();
	void SetTabNavigation(long);
	COleFont GetPageHeaderFont();
	void SetPageHeaderFont(LPDISPATCH);
	COleFont GetPageFooterFont();
	void SetPageFooterFont(LPDISPATCH);

// Operations
public:
	void DoClick();
	void AddItem(LPCTSTR Item, const VARIANT& Index);
	void RemoveItem(long Index);
	VARIANT RowBookmark(long RowNum);
	short RowContaining(float Y);
	float RowTop(short RowNum);
	void Scroll(short Cols, long Rows);
	void ReBind();
	short ColContaining(float X, const VARIANT& Y);
	short GrpContaining(float X);
	VARIANT GetBookmark(long RowNum);
	void RemoveAll();
	void MoveFirst();
	void MovePrevious();
	void MoveNext();
	void MoveLast();
	void MoveRecords(long Records);
	BOOL IsItemInList();
	long WhereIs(float X, float Y);
	CSSActiveCell ActiveCell();
	short ColPosition(short ColPos);
	short GrpPosition(short GrpPos);
	void Reset();
	BOOL IsAddRow();
	VARIANT AddItemBookmark(long RowIndex);
	long AddItemRowIndex(const VARIANT& Bookmark);
	void Refresh();
	void Update();
	void AboutBox();
	CString DeleteSelected();
	void AddNew();
	void CancelUpdate();
	void Export(long Type, long Flags, LPCTSTR ExportToFile, const VARIANT& HTMLTemplate, const VARIANT& OutputFileField);
	void PrintData(long Flags, BOOL ShowSetupDialog, BOOL ShowPrintDialog, const VARIANT& Reserved);
	void SaveLayout(LPCTSTR FileName, long Flags);
	void LoadLayout(LPCTSTR FileName);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_SSDBGRID_H__A934B7EE_F944_11D2_BDE0_00A0C9ED9512__INCLUDED_)
