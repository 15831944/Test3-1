// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "sscolumn.h"


/////////////////////////////////////////////////////////////////////////////
// CSSColumn properties

CString CSSColumn::GetCaption()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CSSColumn::SetCaption(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

long CSSColumn::GetAlignment()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CSSColumn::SetAlignment(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

long CSSColumn::GetForeColor()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CSSColumn::SetForeColor(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

long CSSColumn::GetBackColor()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CSSColumn::SetBackColor(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

long CSSColumn::GetCase()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CSSColumn::SetCase(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

CString CSSColumn::GetNumberFormat()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}

void CSSColumn::SetNumberFormat(LPCTSTR propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}

short CSSColumn::GetFieldLen()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CSSColumn::SetFieldLen(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

BOOL CSSColumn::GetAllowSizing()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CSSColumn::SetAllowSizing(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

long CSSColumn::GetHeadForeColor()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CSSColumn::SetHeadForeColor(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

long CSSColumn::GetHeadBackColor()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CSSColumn::SetHeadBackColor(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

CString CSSColumn::GetDataField()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CSSColumn::SetDataField(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

float CSSColumn::GetLeft()
{
	float result;
	GetProperty(0xc, VT_R4, (void*)&result);
	return result;
}

void CSSColumn::SetLeft(float propVal)
{
	SetProperty(0xc, VT_R4, propVal);
}

float CSSColumn::GetTop()
{
	float result;
	GetProperty(0xd, VT_R4, (void*)&result);
	return result;
}

void CSSColumn::SetTop(float propVal)
{
	SetProperty(0xd, VT_R4, propVal);
}

BOOL CSSColumn::GetLocked()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CSSColumn::SetLocked(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

CString CSSColumn::GetText()
{
	CString result;
	GetProperty(0xf, VT_BSTR, (void*)&result);
	return result;
}

void CSSColumn::SetText(LPCTSTR propVal)
{
	SetProperty(0xf, VT_BSTR, propVal);
}

VARIANT CSSColumn::GetValue()
{
	VARIANT result;
	GetProperty(0x10, VT_VARIANT, (void*)&result);
	return result;
}

void CSSColumn::SetValue(const VARIANT& propVal)
{
	SetProperty(0x10, VT_VARIANT, &propVal);
}

BOOL CSSColumn::GetVisible()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CSSColumn::SetVisible(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

float CSSColumn::GetWidth()
{
	float result;
	GetProperty(0x12, VT_R4, (void*)&result);
	return result;
}

void CSSColumn::SetWidth(float propVal)
{
	SetProperty(0x12, VT_R4, propVal);
}

short CSSColumn::GetDataType()
{
	short result;
	GetProperty(0x13, VT_I2, (void*)&result);
	return result;
}

void CSSColumn::SetDataType(short propVal)
{
	SetProperty(0x13, VT_I2, propVal);
}

BOOL CSSColumn::GetSelected()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CSSColumn::SetSelected(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

BOOL CSSColumn::GetButtonsAlways()
{
	BOOL result;
	GetProperty(0x15, VT_BOOL, (void*)&result);
	return result;
}

void CSSColumn::SetButtonsAlways(BOOL propVal)
{
	SetProperty(0x15, VT_BOOL, propVal);
}

short CSSColumn::GetLevel()
{
	short result;
	GetProperty(0x16, VT_I2, (void*)&result);
	return result;
}

void CSSColumn::SetLevel(short propVal)
{
	SetProperty(0x16, VT_I2, propVal);
}

long CSSColumn::GetStyle()
{
	long result;
	GetProperty(0x17, VT_I4, (void*)&result);
	return result;
}

void CSSColumn::SetStyle(long propVal)
{
	SetProperty(0x17, VT_I4, propVal);
}

BOOL CSSColumn::GetHasHeadForeColor()
{
	BOOL result;
	GetProperty(0x18, VT_BOOL, (void*)&result);
	return result;
}

void CSSColumn::SetHasHeadForeColor(BOOL propVal)
{
	SetProperty(0x18, VT_BOOL, propVal);
}

BOOL CSSColumn::GetHasHeadBackColor()
{
	BOOL result;
	GetProperty(0x19, VT_BOOL, (void*)&result);
	return result;
}

void CSSColumn::SetHasHeadBackColor(BOOL propVal)
{
	SetProperty(0x19, VT_BOOL, propVal);
}

BOOL CSSColumn::GetHasForeColor()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}

void CSSColumn::SetHasForeColor(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}

BOOL CSSColumn::GetHasBackColor()
{
	BOOL result;
	GetProperty(0x1b, VT_BOOL, (void*)&result);
	return result;
}

void CSSColumn::SetHasBackColor(BOOL propVal)
{
	SetProperty(0x1b, VT_BOOL, propVal);
}

BOOL CSSColumn::GetVertScrollBar()
{
	BOOL result;
	GetProperty(0x1c, VT_BOOL, (void*)&result);
	return result;
}

void CSSColumn::SetVertScrollBar(BOOL propVal)
{
	SetProperty(0x1c, VT_BOOL, propVal);
}

VARIANT CSSColumn::GetTagVariant()
{
	VARIANT result;
	GetProperty(0x1d, VT_VARIANT, (void*)&result);
	return result;
}

void CSSColumn::SetTagVariant(const VARIANT& propVal)
{
	SetProperty(0x1d, VT_VARIANT, &propVal);
}

short CSSColumn::GetListCount()
{
	short result;
	GetProperty(0x1e, VT_I2, (void*)&result);
	return result;
}

void CSSColumn::SetListCount(short propVal)
{
	SetProperty(0x1e, VT_I2, propVal);
}

long CSSColumn::GetDropDownHwnd()
{
	long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CSSColumn::SetDropDownHwnd(long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

CString CSSColumn::GetHeadStyleSet()
{
	CString result;
	GetProperty(0x21, VT_BSTR, (void*)&result);
	return result;
}

void CSSColumn::SetHeadStyleSet(LPCTSTR propVal)
{
	SetProperty(0x21, VT_BSTR, propVal);
}

CString CSSColumn::GetStyleSet()
{
	CString result;
	GetProperty(0x22, VT_BSTR, (void*)&result);
	return result;
}

void CSSColumn::SetStyleSet(LPCTSTR propVal)
{
	SetProperty(0x22, VT_BSTR, propVal);
}

short CSSColumn::GetPosition()
{
	short result;
	GetProperty(0x23, VT_I2, (void*)&result);
	return result;
}

void CSSColumn::SetPosition(short propVal)
{
	SetProperty(0x23, VT_I2, propVal);
}

short CSSColumn::GetGroup()
{
	short result;
	GetProperty(0x24, VT_I2, (void*)&result);
	return result;
}

void CSSColumn::SetGroup(short propVal)
{
	SetProperty(0x24, VT_I2, propVal);
}

long CSSColumn::GetCaptionAlignment()
{
	long result;
	GetProperty(0x25, VT_I4, (void*)&result);
	return result;
}

void CSSColumn::SetCaptionAlignment(long propVal)
{
	SetProperty(0x25, VT_I4, propVal);
}

BOOL CSSColumn::GetColChanged()
{
	BOOL result;
	GetProperty(0x26, VT_BOOL, (void*)&result);
	return result;
}

void CSSColumn::SetColChanged(BOOL propVal)
{
	SetProperty(0x26, VT_BOOL, propVal);
}

CString CSSColumn::GetName()
{
	CString result;
	GetProperty(0x4b, VT_BSTR, (void*)&result);
	return result;
}

void CSSColumn::SetName(LPCTSTR propVal)
{
	SetProperty(0x4b, VT_BSTR, propVal);
}

short CSSColumn::GetListIndex()
{
	short result;
	GetProperty(0x4c, VT_I2, (void*)&result);
	return result;
}

void CSSColumn::SetListIndex(short propVal)
{
	SetProperty(0x4c, VT_I2, propVal);
}

long CSSColumn::GetNullable()
{
	long result;
	GetProperty(0x4d, VT_I4, (void*)&result);
	return result;
}

void CSSColumn::SetNullable(long propVal)
{
	SetProperty(0x4d, VT_I4, propVal);
}

CString CSSColumn::GetMask()
{
	CString result;
	GetProperty(0x4e, VT_BSTR, (void*)&result);
	return result;
}

void CSSColumn::SetMask(LPCTSTR propVal)
{
	SetProperty(0x4e, VT_BSTR, propVal);
}

BOOL CSSColumn::GetPromptInclude()
{
	BOOL result;
	GetProperty(0x4f, VT_BOOL, (void*)&result);
	return result;
}

void CSSColumn::SetPromptInclude(BOOL propVal)
{
	SetProperty(0x4f, VT_BOOL, propVal);
}

long CSSColumn::GetClipMode()
{
	long result;
	GetProperty(0x50, VT_I4, (void*)&result);
	return result;
}

void CSSColumn::SetClipMode(long propVal)
{
	SetProperty(0x50, VT_I4, propVal);
}

CString CSSColumn::GetPromptChar()
{
	CString result;
	GetProperty(0x51, VT_BSTR, (void*)&result);
	return result;
}

void CSSColumn::SetPromptChar(LPCTSTR propVal)
{
	SetProperty(0x51, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CSSColumn operations

CString CSSColumn::CellText(const VARIANT& Bookmark)
{
	CString result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		&Bookmark);
	return result;
}

VARIANT CSSColumn::CellValue(const VARIANT& Bookmark)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Bookmark);
	return result;
}

void CSSColumn::AddItem(LPCTSTR Item, const VARIANT& Index)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Item, &Index);
}

void CSSColumn::RemoveItem(short Index)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index);
}

void CSSColumn::RemoveAll()
{
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString CSSColumn::GetList(short Index)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		Index);
	return result;
}

void CSSColumn::SetList(short Index, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x2d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, lpszNewValue);
}

void CSSColumn::CellStyleSet(LPCTSTR StyleSet, const VARIANT& RowNum)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 StyleSet, &RowNum);
}

BOOL CSSColumn::IsCellValid()
{
	BOOL result;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long CSSColumn::GetItemData(short Index)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

void CSSColumn::SetItemData(short Index, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x2f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, nNewValue);
}
