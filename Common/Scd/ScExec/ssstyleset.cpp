// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "ssstyleset.h"


/////////////////////////////////////////////////////////////////////////////
// CSSStyleSet properties

float CSSStyleSet::GetPictureMetaHeight()
{
	float result;
	GetProperty(0x1, VT_R4, (void*)&result);
	return result;
}

void CSSStyleSet::SetPictureMetaHeight(float propVal)
{
	SetProperty(0x1, VT_R4, propVal);
}

float CSSStyleSet::GetPictureMetaWidth()
{
	float result;
	GetProperty(0x2, VT_R4, (void*)&result);
	return result;
}

void CSSStyleSet::SetPictureMetaWidth(float propVal)
{
	SetProperty(0x2, VT_R4, propVal);
}

VARIANT CSSStyleSet::GetForeColor()
{
	VARIANT result;
	GetProperty(0x3, VT_VARIANT, (void*)&result);
	return result;
}

void CSSStyleSet::SetForeColor(const VARIANT& propVal)
{
	SetProperty(0x3, VT_VARIANT, &propVal);
}

VARIANT CSSStyleSet::GetBackColor()
{
	VARIANT result;
	GetProperty(0x4, VT_VARIANT, (void*)&result);
	return result;
}

void CSSStyleSet::SetBackColor(const VARIANT& propVal)
{
	SetProperty(0x4, VT_VARIANT, &propVal);
}

VARIANT CSSStyleSet::GetPicture()
{
	VARIANT result;
	GetProperty(0x6, VT_VARIANT, (void*)&result);
	return result;
}

void CSSStyleSet::SetPicture(const VARIANT& propVal)
{
	SetProperty(0x6, VT_VARIANT, &propVal);
}

VARIANT CSSStyleSet::GetAlignmentPicture()
{
	VARIANT result;
	GetProperty(0x7, VT_VARIANT, (void*)&result);
	return result;
}

void CSSStyleSet::SetAlignmentPicture(const VARIANT& propVal)
{
	SetProperty(0x7, VT_VARIANT, &propVal);
}

VARIANT CSSStyleSet::GetAlignmentText()
{
	VARIANT result;
	GetProperty(0x8, VT_VARIANT, (void*)&result);
	return result;
}

void CSSStyleSet::SetAlignmentText(const VARIANT& propVal)
{
	SetProperty(0x8, VT_VARIANT, &propVal);
}

VARIANT CSSStyleSet::GetFont()
{
	VARIANT result;
	GetProperty(0x5, VT_VARIANT, (void*)&result);
	return result;
}

void CSSStyleSet::SetFont(const VARIANT& propVal)
{
	SetProperty(0x5, VT_VARIANT, &propVal);
}

CString CSSStyleSet::GetName()
{
	CString result;
	GetProperty(0x65, VT_BSTR, (void*)&result);
	return result;
}

void CSSStyleSet::SetName(LPCTSTR propVal)
{
	SetProperty(0x65, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CSSStyleSet operations

void CSSStyleSet::Reset()
{
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
